sys application template /Common/iqdash_v0.3 {
    actions {
        definition {
            html-help { }
            implementation {

package require iapp 1.0.0
iapp::template start

# add some logic to check to see if iapp is already deployed with another name?

# add faveicon base64 encoded image

# assign app name that user typed in as a variable
set app $tmsh::app_name

set cdate [clock format [clock seconds] -format "%Y-%m-%d:%H:%M:%S"]

# all "puts" statements log iapp execution stuff to /var/tmp/scriptd.out
puts "Executing ${app} iApp - ${cdate}"
# tmsh::log statements log to /var/log/ltm
tmsh::log "Executing ${app} iApp - ${cdate}"


set irule {

when RULE_INIT {
    # set global debug bool
    set static::iQdashDebug <DEBUG>
}

when HTTP_REQUEST {
    set pageColor "#eae9e5"

    # uri switch for different pages/functions
    switch [string tolower [HTTP::uri]] {
        "/import" {
            # prepare to recieve data - from iCall - or other gtms for global dashboard?
            if { [HTTP::method] contains "POST" }{
                set import_payload [HTTP::payload]
                if { $static::iQdashDebug } { log local0. "CLIENT-IMPORT [IP::client_addr]:[TCP::client_port] -> [HTTP::host][HTTP::uri]" }
                
                set import_payload [split $import_payload "\n"]
                if { $static::iQdashDebug } { log local0. "CLIENT-IMPORT PAYLOAD=$import_payload" }

                #take first line(list item 0) and scan it to the different variables we need
                scan [lindex $import_payload 0] {%[^,],%[^,],%s} host date time
                #log local0. "----- host=$host date=$date time=$time"
                
                # see if the first line parsed correctly - if it existed
                if { [info exists host] and [info exists date] and [info exists time] } {
                    # Note:  using tables just to store the information, I'm sure there is a better layout
                    #   but each table only has a single row, keyed by the hostname
                    #   the data for each piece gets parsed after being called back
                    
                    # add to device table
                    table set -subtable iQdevices host "$host,$date,$time"
                    
                    # break up lines 2-3 into their sub-sections
                    set selfs [split [lindex $import_payload 1] ";"]
                    set iqs [split [lindex $import_payload 2] ";"]
                    table set -subtable iQstats $host $iqs
                    table set -subtable iQselfs $host $selfs

                    if { $static::iQdashDebug } { log local0. "CLIENT-IMPORT: SUCCESSFULL/COMPLETE" }

                    # repond to curl post to prevent tcl error in iCall
                    HTTP::respond 200 content "Got it\n" noserver Cache-Control no-cache Connection Close
                } else {
                    # didn't get the expected data from post - respond accordingly
                    if { $static::iQdashDebug } { log local0. "CLIENT-IMPORT FAILED: MISSING/MALFORMED DATA" }
                    HTTP::respond 200 content "Missing data or unexpected format\n" noserver Cache-Control no-cache Connection Close
                }
            } else {
                # respond to GET requests
                if { $static::iQdashDebug } { log local0. "CLIENT-IMPORT GOT GET REQUEST" }
                HTTP::respond 200 content "This URL only accepts POSTs\n" noserver Cache-Control no-cache Connection Close
            }
        }
        "/raw_export" {
            # bulk data export function - for global iquery dashboard and/or other tools
            append raw_export [table lookup -subtable iQdevices host]
            scan $raw_export {%[^,],%[^,],%s} host date time
            append raw_export [table lookup -subtable iQselfs $host]
            append raw_export [table lookup -subtable iQstats $host]
            HTTP::respond 200 content $raw_export noserver Cache-Control no-cache Connection Close
        }
        "/csv_export" {
            # csv data export function
            if { $static::iQdashDebug } { log local0. "CVS EXPORT FUNCTION" }
            
            set host [table lookup -subtable iQdevices host]
            scan $host {%[^,],%[^,],%s} host date time
            set selfs [table lookup -subtable iQselfs $host]
            set iqs [table lookup -subtable iQstats $host]
            
            append csv "Hostname,Date,Time\n"
            append csv "$host,$date,$time\n\n"
            append csv "Self-IPs,Port-Lockdown\n"
            foreach self $selfs {
                append csv "$self\n"
            }
            append csv "Src-IP,Dest-Device,Dest-IP:Port,Status\n"
            foreach iq $iqs {
                append csv "$iq\n"
            }
            set filename [clock format [clock seconds] -format "[lindex [split $host "."] 0]_%Y%m%d_%H%M%S_iQueryStatus.csv"]
            HTTP::respond 200 content $csv \
                "Content-Type" "text/csv" "Content-Disposition" "attachment; filename=$filename" \
                "noserver" "Cache-Control" "no-cache" "Connection" "Close";
            if { $static::iQdashDebug } { log local0. "CVS EXPORTED, FILENAME: $filename" }
            # unset the variable to keep from re-appending all the informtion if clicked multiple times
            unset csv
        }
        "/favicon.ico" {
            # respond with favicon, cause we can... 
            if { $static::iQdashDebug } { log local0. "favicon hit" }
            set favicon {
                iVBORw0KGgoAAAANSUhEUgAAADMAAAA1CAYAAADs+NM3AAAACXBIWXMAAAsTAAALEwEAmpwYAAAK
                TWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVN3WJP3Fj7f92UPVkLY8LGXbIEAIiOsCMgQ
                WaIQkgBhhBASQMWFiApWFBURnEhVxILVCkidiOKgKLhnQYqIWotVXDjuH9yntX167+3t+9f7vOec
                5/zOec8PgBESJpHmomoAOVKFPDrYH49PSMTJvYACFUjgBCAQ5svCZwXFAADwA3l4fnSwP/wBr28A
                AgBw1S4kEsfh/4O6UCZXACCRAOAiEucLAZBSAMguVMgUAMgYALBTs2QKAJQAAGx5fEIiAKoNAOz0
                ST4FANipk9wXANiiHKkIAI0BAJkoRyQCQLsAYFWBUiwCwMIAoKxAIi4EwK4BgFm2MkcCgL0FAHaO
                WJAPQGAAgJlCLMwAIDgCAEMeE80DIEwDoDDSv+CpX3CFuEgBAMDLlc2XS9IzFLiV0Bp38vDg4iHi
                wmyxQmEXKRBmCeQinJebIxNI5wNMzgwAABr50cH+OD+Q5+bk4eZm52zv9MWi/mvwbyI+IfHf/ryM
                AgQAEE7P79pf5eXWA3DHAbB1v2upWwDaVgBo3/ldM9sJoFoK0Hr5i3k4/EAenqFQyDwdHAoLC+0l
                YqG9MOOLPv8z4W/gi372/EAe/tt68ABxmkCZrcCjg/1xYW52rlKO58sEQjFu9+cj/seFf/2OKdHi
                NLFcLBWK8ViJuFAiTcd5uVKRRCHJleIS6X8y8R+W/QmTdw0ArIZPwE62B7XLbMB+7gECiw5Y0nYA
                QH7zLYwaC5EAEGc0Mnn3AACTv/mPQCsBAM2XpOMAALzoGFyolBdMxggAAESggSqwQQcMwRSswA6c
                wR28wBcCYQZEQAwkwDwQQgbkgBwKoRiWQRlUwDrYBLWwAxqgEZrhELTBMTgN5+ASXIHrcBcGYBie
                whi8hgkEQcgIE2EhOogRYo7YIs4IF5mOBCJhSDSSgKQg6YgUUSLFyHKkAqlCapFdSCPyLXIUOY1c
                QPqQ28ggMor8irxHMZSBslED1AJ1QLmoHxqKxqBz0XQ0D12AlqJr0Rq0Hj2AtqKn0UvodXQAfYqO
                Y4DRMQ5mjNlhXIyHRWCJWBomxxZj5Vg1Vo81Yx1YN3YVG8CeYe8IJAKLgBPsCF6EEMJsgpCQR1hM
                WEOoJewjtBK6CFcJg4Qxwicik6hPtCV6EvnEeGI6sZBYRqwm7iEeIZ4lXicOE1+TSCQOyZLkTgoh
                JZAySQtJa0jbSC2kU6Q+0hBpnEwm65Btyd7kCLKArCCXkbeQD5BPkvvJw+S3FDrFiOJMCaIkUqSU
                Eko1ZT/lBKWfMkKZoKpRzame1AiqiDqfWkltoHZQL1OHqRM0dZolzZsWQ8ukLaPV0JppZ2n3aC/p
                dLoJ3YMeRZfQl9Jr6Afp5+mD9HcMDYYNg8dIYigZaxl7GacYtxkvmUymBdOXmchUMNcyG5lnmA+Y
                b1VYKvYqfBWRyhKVOpVWlX6V56pUVXNVP9V5qgtUq1UPq15WfaZGVbNQ46kJ1Bar1akdVbupNq7O
                UndSj1DPUV+jvl/9gvpjDbKGhUaghkijVGO3xhmNIRbGMmXxWELWclYD6yxrmE1iW7L57Ex2Bfsb
                di97TFNDc6pmrGaRZp3mcc0BDsax4PA52ZxKziHODc57LQMtPy2x1mqtZq1+rTfaetq+2mLtcu0W
                7eva73VwnUCdLJ31Om0693UJuja6UbqFutt1z+o+02PreekJ9cr1Dund0Uf1bfSj9Rfq79bv0R83
                MDQINpAZbDE4Y/DMkGPoa5hpuNHwhOGoEctoupHEaKPRSaMnuCbuh2fjNXgXPmasbxxirDTeZdxr
                PGFiaTLbpMSkxeS+Kc2Ua5pmutG003TMzMgs3KzYrMnsjjnVnGueYb7ZvNv8jYWlRZzFSos2i8eW
                2pZ8ywWWTZb3rJhWPlZ5VvVW16xJ1lzrLOtt1ldsUBtXmwybOpvLtqitm63Edptt3xTiFI8p0in1
                U27aMez87ArsmuwG7Tn2YfYl9m32zx3MHBId1jt0O3xydHXMdmxwvOuk4TTDqcSpw+lXZxtnoXOd
                8zUXpkuQyxKXdpcXU22niqdun3rLleUa7rrStdP1o5u7m9yt2W3U3cw9xX2r+00umxvJXcM970H0
                8PdY4nHM452nm6fC85DnL152Xlle+70eT7OcJp7WMG3I28Rb4L3Le2A6Pj1l+s7pAz7GPgKfep+H
                vqa+It89viN+1n6Zfgf8nvs7+sv9j/i/4XnyFvFOBWABwQHlAb2BGoGzA2sDHwSZBKUHNQWNBbsG
                Lww+FUIMCQ1ZH3KTb8AX8hv5YzPcZyya0RXKCJ0VWhv6MMwmTB7WEY6GzwjfEH5vpvlM6cy2CIjg
                R2yIuB9pGZkX+X0UKSoyqi7qUbRTdHF09yzWrORZ+2e9jvGPqYy5O9tqtnJ2Z6xqbFJsY+ybuIC4
                qriBeIf4RfGXEnQTJAntieTE2MQ9ieNzAudsmjOc5JpUlnRjruXcorkX5unOy553PFk1WZB8OIWY
                EpeyP+WDIEJQLxhP5aduTR0T8oSbhU9FvqKNolGxt7hKPJLmnVaV9jjdO31D+miGT0Z1xjMJT1Ir
                eZEZkrkj801WRNberM/ZcdktOZSclJyjUg1plrQr1zC3KLdPZisrkw3keeZtyhuTh8r35CP5c/Pb
                FWyFTNGjtFKuUA4WTC+oK3hbGFt4uEi9SFrUM99m/ur5IwuCFny9kLBQuLCz2Lh4WfHgIr9FuxYj
                i1MXdy4xXVK6ZHhp8NJ9y2jLspb9UOJYUlXyannc8o5Sg9KlpUMrglc0lamUycturvRauWMVYZVk
                Ve9ql9VbVn8qF5VfrHCsqK74sEa45uJXTl/VfPV5bdra3kq3yu3rSOuk626s91m/r0q9akHV0Ibw
                Da0b8Y3lG19tSt50oXpq9Y7NtM3KzQM1YTXtW8y2rNvyoTaj9nqdf13LVv2tq7e+2Sba1r/dd3vz
                DoMdFTve75TsvLUreFdrvUV99W7S7oLdjxpiG7q/5n7duEd3T8Wej3ulewf2Re/ranRvbNyvv7+y
                CW1SNo0eSDpw5ZuAb9qb7Zp3tXBaKg7CQeXBJ9+mfHvjUOihzsPcw83fmX+39QjrSHkr0jq/dawt
                o22gPaG97+iMo50dXh1Hvrf/fu8x42N1xzWPV56gnSg98fnkgpPjp2Snnp1OPz3Umdx590z8mWtd
                UV29Z0PPnj8XdO5Mt1/3yfPe549d8Lxw9CL3Ytslt0utPa49R35w/eFIr1tv62X3y+1XPK509E3r
                O9Hv03/6asDVc9f41y5dn3m978bsG7duJt0cuCW69fh29u0XdwruTNxdeo94r/y+2v3qB/oP6n+0
                /rFlwG3g+GDAYM/DWQ/vDgmHnv6U/9OH4dJHzEfVI0YjjY+dHx8bDRq98mTOk+GnsqcTz8p+Vv95
                63Or59/94vtLz1j82PAL+YvPv655qfNy76uprzrHI8cfvM55PfGm/K3O233vuO+638e9H5ko/ED+
                UPPR+mPHp9BP9z7nfP78L/eE8/sl0p8zAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMA
                APn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAVBElEQVR42rSaa4xd13Xff/txzj333nkPySE5
                fIikHqQoUpIlOTJsyy+laVC3dv2q4SR1giRF0fZTm6JI0Aat49RNACP1hwBxgyDoh6aJjcKKYzcP
                2JXlSopUyXrRpmRSpChxSA455Axn7uuc/Vr9cM6QQ1KiYrc5wMK+5+DOnfXf6/Vfax91/vP/gSuX
                CBiDbrfR7QLVaqGLFrookCxHZRlKa4gBSZHkPOId4ryhcjvFuUPi/J3i3F68354qv0W83yrOj0nl
                +lL6c1L5RfF+IbnwGq56BZe+n1w4kyoXcAGpAuI84iJSeZKPSIikQUmsStL+Pcz8zz9k7cln8eeX
                UNZeUf/qpx/vGkPk/Qo+ilYPYMyU2NgmmRYxZcokS4yZKI3SekaM3obRnqid0tqJ0qUoWQF5GvhT
                4FuA+3GV+fHAiOxG+Bml1LvJsr3ALSlJQRJUsmAEMbG2otYorUlao7TK0GSi6KABpUHFXUqp25VS
                7xXhOPBt4KvAub9tMFtQ/EOM+XvKmIdQalIljQA1kAQpgYmIMWAiaA1agboqSilEqY3P2yh1ANQB
                lHoQpd4HfAP4GnD5bwPM/Sg+izE/Q55PI1Ir6hzgUSkhwSPOIa5CKgdVhbiAICitkOtA3SC62TD4
                GPBe4C7gvwHP/f8C0wE+pJB/rZR6r7IWMRZCQAHSgFKtvF6LNoSI9h4pS9Jaj7TWR0K85kcVIDEg
                3qN8gBBrq6YEIohis8C/VHBYUL8DfAcY/r+AaQOfEPhNBTsQQWKsVUkJtEGPjddZr91GFx3IWyhj
                AEGcx585w+i55/GnXq8VRtW/nASEKxsiKSGpXokJYqzXEB8mxL2k9GvA14HRjwOmDXxakC+S0rQS
                QbyHmGrFp6bINs2hZ2bQRbt2kze58n23ku/dS+/Pvsnoe98D0YgAxpAfuAOUIa32SKs94uUeabVP
                6g1Q/QESAmlUIVW1V1L8j6Bt43Y/EpgWyKdE0hdVkmkJnugq9NgE+a5dZPM70WNdlDZgTL3R5QiU
                QreKq0mvWbPt80x+5tPYHTvoPfINZDQi27WLqX/yC9jZWaL3pLIilhVxOKxdc7VHuLiCX1gkvHYG
                /8MTt5RHX/11Wet5knzlbwam3uGHJcpvqCTTUpaICNnOXRQH78LObkEVGxQOjvL7R3Cvn0KhMBMT
                mNlNZDt2YWZm6i9pjZmcIt+3DyRBCOR33I6dm0N32gh17GsEGyOSEilGkg+EyhFHFXFlVbcXzt7u
                Li1/TrVa5yTGJ4B0LRitroakCErkXmL8t8S4UyoHKZIfuJPi0GHslrmrPt9c/tQpqleOEi9eRCmN
                jwllDXpsgmz3LbRu34/dthV/5gyDx76LDAaovEV+cD8qsyQRJISrDASpN9TUVtdFC6YmYG4Wbt2B
                GVV3hBR/QxetXzTd7gm9kQHIqNpIZbYpa3+ZGB7EK8RV5PsP0L7nHZjZTW/qj/70adLaWu1yKMSV
                pMtDwsJZ3KsnqY4fJ5vfiXvtFKOnnkYE7I7t5LffClmGpFgDEJCYEEl1QoixSQixfp4iomoriw/v
                Gz73/X82fP3051ORryRVb7GVYXkVjM0+LIX6FAAxYWZmaD/wzrcEggix3wcfkCSQYr2xWY6gif0+
                /vnnGT31DMSEOI8q2rQO3YmdmUGg3gRdx53e4DeKhE41KBUjKnhUaHjayhr9x5785ZVXjj1Rjbf/
                NGoVazCpNq1Sep6UPiIhzBIDdNq0Dt+Nnd3y1vnOeyhHSOVqD4kRQkRCUz+MRRcdhAp8gEEJeU7r
                roN1Sk6JcGGJNCrBWLAaURpRitQU2KQVIiAIGA2ZJSxdIgU/rrrFp+3Y2ItKcUIBNq71QQTdyn9e
                tVvvFScoo7HjExSH7q5/4K0oWkqkqiKVFQoFAin6OoX7iPganEpCcgGJCTs9Rb53D2hNWuuz9uX/
                yujp51CdsbroWovYHPIMijaqW0C3S5wYhx2bYcdWymMn8MOSpPiYKPmWUuokIHUCENWWmN6lfBiv
                i0OOnZ5Bd7s3I5uI90hZKy9aQ6qDWUINghiu3KeyQhtDtmMeOz2FAvzJ16heOkr18nF0u1NbuAw1
                Bapq65IiSYFXGjfWIWyeoso0oSqRom1ibu9LWfYVJXLZsjZC5fZDZPZW0VohCZVlmE73LQvhFTwx
                Egd9Yn9QM+SUkBARH+o4CgFJTQQMR9gtm2nfc7gmmsDou09RHT2GrPZJSdUVv/k+1gIJGQkpJmIO
                oaqozi/hC4u0c8QqoqT3OSUPJaO+bonJENLHky93s9YjjUaYmak6oN/u8h4ZjpCyhLxVU5R1ZYxF
                ocH5GpzzmE2byA/fhTS8TE2N037/uwlvnCWcv0S8tEJcW0N6QxK+dl1VIEULKTTJaFIG0RiiVkSt
                CKR9McX3iTLfsRLTvMTqfjXeLez2bXVnOTtNtnvXzYEohe50GPvQh0jDAdispvd1lkVQaK2pjr7M
                4NuPIZUjm5/HTk/XtUWg+8GHaP/E/YTVNcLSMuHCRcLZJcLCOfypBdzLJ3Cvv4EbreHCGHFmgpQb
                otZEsw4Gm4zer1r5AZsqd1hGo+nu4YN0f/KD2C2bUe3iavW+GZ5ul/Y733lzV3SOtUf+HNXukN+6
                ty65KYFS2B3bUUDepOQEpBgIy6uEc+epjhxj+N2n6T33IuWpBVy/hzcdYqdN1IqkISkIWm9Vmbnf
                4sOhtNbPs9276bz7XT9qy1kHvTTmqCtHHbSDIeHcIqMnnyFeWqF44D5adx24JoEk72uWLEICRCnE
                GvTmWfLNs2SH76T1sb9D8b0jmG98i/BXjzK6cJ4QPVHlRGNISoikTZLCISs+7EVopdUe/o0z6LEO
                4j16YgLdLm4KJQ0GuBOvkQbD9Q6lfj4cUf3wOMPvPE44ex6iUNx1gGznjjqkRK5xV1nPjrFOHikN
                SalhA1lG8Z4HmLvvEPlDDxD/8L9z6cgRfIoE0QSjCEpNidJ7rLi4naKdDR5/ivLlH5IGA8zMDFOf
                /TTt++69CZJEWDzP8u/+F/yZc3Vzluo+RHxESg/aID5hNs2S7ZxHASnFOqZErggb7xtuth53qayI
                gyGiFOPvup9b9u0m/u7vc+bRx/DBE/OCoKSTUtxixcctWJ35c0vECxeJwxHZnqrOQG/nZD4gdb9R
                t9BJICSI1BRFQVrt0Tq4H7tje1No5U1K1lVQ9T6lG56nEIjeY8bG2P1Pf4Fh9Cw88RTOOWLesSHF
                cS3Oz4mLFh8QF8F7VEh13XibcJGQmrSbwCfEp/pZbKR0SIi0Dh4gv23fVXd6E7le+Ru+kxIpBJJz
                5NPT7PzER2nv24PzHi8Jn9KYFhe74jyEpm0NtVzj19fv4gY6Iz7UVKUKSOXB+Xo4WHni5T52y2aK
                ew5iihZx/W+vKHitRd7MQiJCSqlOECKkGPH9AeO33cbmdz+I3TxDORoRINfJhz4uiLiGRpS+XsPf
                oGimRKoCqfKkykPlSVWARtLlHvnBO8j331qzYqUwWYbOc3SrhW63wBoESDE2WbFRvnG1dUDSPBMR
                gnNICGy+9266e/ZQBU9QOIsLi2L1NiRlpJqmJxfqlLmen97CSioJVKEJdltbKtahKzE1AewYPvY0
                btc8GIPqtGuZnEBPjaPyDLIcLQmpHLGqroC5Ei8b7lNKJBHiYEB78yY689uQIzlRq74VF84TdSDq
                DCtcsVCKb1tjBOq5cOXq8VOSqy4UE6rdZvS/n2H06FNgLWpsHDM1jpnbhL1tD/n+29C3zGPm59DT
                U1Dk9fcaqpRivKL8OqAr1gkBlefY8UnU2FiIilVLSAsSxUlIbWWl9v2ygvLtRr51ays+1daxod7J
                JE2jliA2zNoHxA2Qc5eonEfwQCSRw/Q0+vZbyN55N50PPEjnwXtRY926RaAGIRutsi4xYgDdaqGK
                oifBL9oUw0mldEVS9R+4mtYn568E5fVuptTV2VfynuR93aglqQFIDUbW7xsWrJRGG4v4FlFBMhBd
                iTtyFHfkB8jXv0l+3yEmfur9bPqpD6Inx4lxSHLuGiAxxtoyoW4PkjVrIK/ZVMWjSqdKGQViEBdJ
                pa+7P64p7DeMkFAKQiKVAWxoWPNVV6OJH1IEn0iBerczTTSaaMAbajtZcK6i9+zznD/6Mmcff5Ld
                v/SPGT+4HxUDcTC81jIpkVLEh4BoddG2i+9b8ekIsIpWO1Um9cjUOWRYNpX6xgSgpB5FigKJdZzh
                Ql17kkAzlFAxQVLEUQkIqdWq2a5RBKOIRhMseGvxmcZrwUmkHA1Ye/KvWe2vcusv/TzT99wNWhOd
                I8ZIbGIpes+oHOKFC91u9zmLcDZa/g+kvdrTgUTyFXF1cHMwULfUMVEfEvnaZImaUyUQrQijfs2G
                jSERSEVBRAjW1LzKKrxR+GYNmSWZNr6qWHjmWdLmWe6YmqS7Y544GBDXrSJCWVYMer3kvH95zNij
                1mcqxkz9Cch7TFS3q0pBCITVXpOW043lZX16pk1tmRRILl4Z8khjNT/qI0XB5Kc+TDKK5b94lKo/
                QMY7NZDGSt7oGpABryEoiOMdkoosvPgSEy+8yL757XVKDoEQAmjN2vIyrnKv2Dz/VkrSt4OuAeEx
                BS/bTN1OZUkJ/HBwQ+W/5riwGdRFrQk0ScLUxxaiFZFEMIapj/00237rV4kxMihHrPyPb6Cnx4hW
                XwHkDQRNDUopgtF4Jcj4OL3RkIsLC2xbXav/X1kSQsC2ChZPn8I59+jE7KYnAKyvJ5oVSn0not5L
                y85EBWUDpo6LdMMwA6VJWYbv5DhjUYVGjEGUEAUShqkP/wO2fu5XyLZuIQNmfu7jLD7/AsNeH4pi
                g2XA68bNVANQKZyCisRgOKAcDjB5ixACAlTDIWdOnBz2lleempzZtJYk1cNZJRCt+qOqpb9dFZbS
                QjkYENenim9GDhEks4RWRpVrSqupMkOpFZUG2THHtl/9FxS7d1L1+4QYmLz/HuY++48oiZQGKqup
                jKIyCmc0Tmsqram0wmlFJZHUysgnJrB5C19VxBgxxvDGq8cZ9ntfsXn2OI1naC3QyFI0+i+qVrY0
                IjFYWSYMh1eI5TXsNUWSJLAG3zJULYvLDVVuKAtLlRv6gz7Ds+eJzoHWuLUeZmKcuY/8Xbo/cQ99
                N6JSgstMA0BTGY0zNRhvDb3hADs1zeTOnWibEZxDG8vK8jLPP/nEWp61vrpjz97TE7MzTG3ahL7U
                1lxqay5nSgZKvtZ3oz/qhxFxvB41yVtQdgkRNdamamcMxDNUiarQ+CKrn1UDFv78r6guLaPyjOA9
                oSwpts2x7xc/i53fxupgjYF3uMzgrMFpXVsEYWX1MiMUOx94gM233UbwDptlrK0s8+gjX8N796XO
                2NiTxtpojMFYg/nIzFaCViTA9Yfl5D0Hz93xK/98//a//9O3dHftqAtgQymuMtgakOm06S8usXzi
                BGtLFxi5itKVVERS0aK3uMjMO+6hPb+dGAKxqkBp2tu2ks1M0ltZYfniEmuDAUNfMfQVg3LEKATy
                qSnu+MAHOPD+DzC9dSvVcMipY8d47JvfZG115S/Hxsa/MDk5edZYeyU52Wl99Uigcp4t+/a+NP/J
                j/4nY+yW6NydOsuw7fY1ZEAaJqu1ZudnPk4+P8fSs88xPL+EGw2pVlcZLF3k8uJZzjzzDFP3HKI7
                O8tgeZnYpNWdD3+QbNMmJp96msWTJ+gP+kQRVFEwPjfH/F13sfPwYUyec2FhgZeff47nnvxrzp89
                88L8nlv+vff+RJ5ljHe7xIbhq3+15ZYrYEJ/yP2f/Ag/+zu/bZeXLn7i3DPP/ibd7t58apJ8bAzb
                aWNaOaZVYFstlDXkU5MopalWLzNauojr9bnwwks8/+XfZ3BpmdlDd3LgZz/D3H3vQCmFbnZStXLy
                bpfR5ctceuM0veVlog+oVk5nagrTLri0uMjpV49z7KUjHH3xBWKS5x96+OHPGaMf6XbHePXkSVZ7
                /Svtiv3ihVPXZN2HTr7MPS++FN44/cYfP/65L5j58fFfLybGb8vGxlRrcpJiYoLWzBTduTny6Sls
                q4XttsnHJ8inpzCdNmp6ijIzpKlJzp46xfLvfZnZOw8wu/8OxrduxXba6LyFNgbTbmPabca3b8dV
                FYPeGqdPnuCNY8c4cfQop0+9xsrqapya3fLSvQ/e/4W53bse8T4wOTHOf/6DP+D48VevOcG+6fVv
                7r7vk1uM+Xxwbh8pmfU5l9YaZSzKmPr9FWtRVoOxJK3wztWMVoTKObz3JKMx7fpk2hZtVNGCPCdp
                jU+JsizpDfr0+32GwyFOhIAKtih+cODQ4X+Xdzp/9ttf+tLNmpKbXibXRv/cnQcfPjgz82suhPeQ
                pD7BaoZ+IvVYKNWjyrpXR4E1JKUQ6iIaESL14CZKwosQRQhAECEgBBGiUkTApUQQYWbzlv/1yqnX
                f+vo8ePfRinjnFv/mRuVfYtD21bzMsN4FBk7uXp5eHo4ODbWbsepse6+qFTulSKsD69NPSoNWhN1
                PdT2qpagaFaFbz57VRdFr1QNhprOBAVeBJcE22r1StRXjxx/9Y9PnV54zXlXxBjbzTTXNgdtsrEj
                2QhGA1lz/t8FxoEJYLaKcXxpOEwLa73lhUH/YtEusqLINyutda0sxEbh0AAICgIKD41c/Rw2rOvi
                BCKKpE01iOkHPzj52l8unD//vQsXLy6HEFrAWKOf3QBGbeC+14AxDeqikXVQXWBCRCb7znG217t8
                qSx753r9XqkIKs9aJrOthG6UlXp31bWKexE8CZcEF2MdDykRUQSlGYbUv9DrvX7q3OJLi8vLLy4u
                Lb1almUlItmbWGHj59iAEXWdZfINQIoNYDrNzow39y2gMzs5sWPbxMTemU5n51S7M9ttF2PWmrbR
                Jhd19VWSSJ0IIhBTHStlDN7HOBqW1XBtOFruV9XCSm/t9dXVtcXmlZISGAC9RvrNuzODRsoN4q6E
                7XUJIWuktcFKRQNoHVhnA+AMmNg8NTU3OzmxrVu0Zls2G1dQaMhSSjYhOqEEpbyAj0pVpXP9yvuV
                y2trSxeXVxYbZX2j3KhRfNQoPtxwvxHAuufKzbKZaixlGv9cB5c3a+u6+3yDP5sNf6ev823ZcBQT
                Nqzr3ug2KOqAaoOsPwsbXOtHSs1vBXCjwuY6EOY6EOo6MHIdqPVUG65bN0q6caxy4/V/BwA2ppmX
                Ir8qLgAAAABJRU5ErkJggg==
            }
            HTTP::respond 200 content [b64decode $favicon] noserver Cache-Control no-cache Connection Close
        }
        default {
            # regular user http request - call data from tables - respond with html dashboard
            # append all the data into the html format we want
            set host [table lookup -subtable iQdevices host]
            if { $static::iQdashDebug } { log local0. "html table host details:  $host" }

            scan $host {%[^,],%[^,],%s} host date time
            if { $static::iQdashDebug } { log local0. "html post scan table host:  $host - $date - $time" }
            
            set selfs [table lookup -subtable iQselfs $host]
            set iqs [table lookup -subtable iQstats $host]
            if { $static::iQdashDebug } { log local0. "table selfs:  $selfs" }
            if { $static::iQdashDebug } { log local0. "table iqstats:  $iqs" }

            append response "<html>\n"
            append response "<head>\n"
            append response "\t<title>F5 iQuery Dashboard</title>\n"
            append response "</head>\n\n"
            append response "<body bgcolor='#eae9e5' style='font-family:consolas;text-align:center'>\n"
            append response "<br><h1>F5 iQuery Dashboard</h1>\n"
            append response "<h3>$host</h3>\n"
            append response "<p>Data Refreshed: $date - $time</p>\n"
            append response "<table border='0' cellpadding='2' cellspacing='0' width='500' align='center'>\n"
            append response "\t<tr><th>Self-IPs</th><th>Port-Lockdown</th></tr>\n"
            
            # loop through selfs
            foreach self $selfs { 
                set self [split $self ","]
                append response "\t<tr><td>[lindex $self 0]</td><td>[lindex $self 1]</td></tr>\n" 
                }
            append response "</table>\n<br>\n\n"
            append response "<table border='1' cellpadding='2' cellspacing='0' width='800' align='center'>\n"
            append response "\t<tr><th>Src-IP</th><th>Dest-Device</th><th>Dest-IP:PORT</th><th>Status</th></tr>\n"

            # loop through iquery connection details
            foreach iq $iqs { 
                # skip emtpy item at end of list
                if { $iq eq "" } { continue }
                # split object into list of iquery connection details
                set iq [split $iq ","]
                # if not connected, change page color for row to red
                if { [lindex $iq 3] ne "connected" } {
                    set pageColor "#ffcccc"
                }
                # set row color and table entries
                append response "\t<tr style='background-color:$pageColor'>"
                append response "<td>[lindex $iq 0]</td><td>[lindex $iq 1]</td><td>[lindex $iq 2]:4353</td><td>[lindex $iq 3]</td>"
                append response "</tr>\n" 
                }
            append response "</table>\n"
            append response "<p><a href='csv_export'>CSV Export</a></p>"
            append response "<button onclick='window.location.href = \"/csv_export\";'>CSV Export</button>"
            append response "</body>\n"
            append response "</html>\n"
            if { $static::iQdashDebug } { log local0. "html page built - sending to client" }
            HTTP::respond 200 content $response noserver Cache-Control no-cache Connection Close
        }
    }
}

}
# map irule variables and create irule
set irule [string map [list <APP> $app <DEBUG> $::main__iRuleLogging] $irule]
set irule [iapp::conf create ltm rule ${app}_irule $irule]

set icall {
    set log <ICALLLOG>
    set cdate [clock format [clock seconds] -format "%Y-%m-%d,%H:%M:%S"]
    set host [tmsh::get_field_value [lindex [tmsh::get_config sys global-settings] 0] hostname]
    if { $log } { tmsh::log "-----------------------------------------------------" }
    if { $log } { tmsh::log "--- iCall/iApp <APP>: $host - $cdate ---" }

    foreach ip [tmsh::get_config /net self] {
        if { $log } { tmsh::log "[tmsh::get_field_value $ip address],[tmsh::get_field_value $ip allow-service]" }
        append selfs "[tmsh::get_field_value $ip address],[tmsh::get_field_value $ip allow-service];"
    }

    foreach obj [tmsh::get_status /gtm iquery] {
        if { $log } { tmsh::log "[tmsh::get_field_value $obj server-name],[tmsh::get_name $obj],[tmsh::get_field_value $obj connect-state]" }
        append iquery "<sIP>,[tmsh::get_field_value $obj server-name],[tmsh::get_name $obj],[tmsh::get_field_value $obj connect-state];"
    }

    # post data to vip via post
    set cmd "curl -s -X POST <VIP>/import -d '$host,$cdate\n$selfs\n$iquery\n'"
    set response [exec bash -c $cmd]
    # need to clean this up - make easier to understand
    if {[catch {set response [exec bash -c $cmd]} result]} {
        if { $log } { tmsh::log "iCall/TCL/EXEC Ran: $cmd - error: $result"}
    } else {
        if { $log } { tmsh::log "iRule accepted POST, Response = $response"}
    }

}

# string map for adding variables to icall script
set icall [string map [list <VIP> $::main__vs__vip <sIP> $::main__self <APP> ${app} <ICALLLOG> $::main__iCallLogging] $icall]
# issue command to create icall script
set icall [iapp::conf create sys icall script ${app}_iquery_script definition \{ $icall \}]
# create icall hanlder to execute icall script
iapp::conf create sys icall handler periodic ${app}_iquery_update_handler \{ \
    interval $::main__update_frequency \
    first-occurrence $cdate \
    script $icall \}

iapp::conf create ltm virtual ${app}_iqdash_t${::main__vs__port}_vs \
    destination $::main__vs__vip:$::main__vs__port \
    mask 255.255.255.255 \
    ip-protocol tcp \
    profiles replace-all-with \{ \
        /Common/f5-tcp-progressive \{ \} \
        /Common/http \{ \} \} \
    rules \{ $irule \} 



iapp::template stop
            }
            macro {
            }
            presentation {

section options {
    choice display_help display "xlarge" default "hide"
    optional ( options.display_help == "full" ) {
        message display_help_max
    }
}

section main {
    message hello
    row vs {
        string vip  required validator "IpAddress" display "xlarge"
        string port default "80" required validator "NonNegativeNumber" display "xlarge"
    }
    choice self display "xlarge" tcl {
        set ::choices [iapp::get_items net self]
        return [iapp::safe_display ::choices]
    }
    optional ( options.display_help == "full" ) { message self_more }
    string update_frequency default "300" required validator "NonNegativeNumber"
    optional ( options.display_help == "full" ) { message update_frequency_extra }

    choice iRuleLogging { "No" => "0", "Yes" => "1" }
    choice iCallLogging { "No" => "0", "Yes" => "1" }
}

section todo {
    message what
    optional ( options.display_help == "full" ) {
        message todo1
        message todo2
        message todo3
        message todo4
        message todo5
        message todo6
        message todo7
        message todo8
    }
}

text {
    options "Template Options"
    options.display_help "Do you want to see inline help or additional information?" {
         "Yes, show inline help" => "full",
         "No, do not show inline help" => "hide"
    }
    options.display_help_max "" "Inline help is available to provide contextual descriptions to aid in the completion of this configuration.  Select to show or hide the inline help in this template. Important notes and warnings are always visible, no matter which selection you make here."

    main "iQuery Dashboard iapp"
    main.hello "Introduction" "This iapp creates an iQuery dashboard showing iquery connection status and details to aid in troubleshooting"
    main.vs "Virtual Server"
    main.vs.vip "VIP"
    main.vs.port "PORT"
    main.self "Source Self IP" 
    main.self_more "" "Common GTM/DNS deployments utilize a single self IP, however some require more than one.  This provides the option to select the self IP that should be used to source the iQuery traffic from the local BIGIP.  There may be scenarios, depending on routing, where multiple selfIPs can be used to source iquery traffic.  I have yet to see that, but it's possible, but that would make the source details inacurate for some rows"
    main.update_frequency_extra "How often to update iquery status information?" "^^^Provide value in seconds: 300=5m, 3600=1hr, 28800=8hr"
    main.iRuleLogging "Enable iRule Logging?"
    main.iCallLogging "Enable iCall Logging?"

    todo "TODO/Options/Upgrades list"
    todo.what "" "List of 'to do' items so they can be tracked - Show inline help for more details"
    todo.todo1 "todo 1" "Assume single self IP and append to beginning of each row? Or provide a list of selfIPs and let the user choose (include note about things to consider when choosing which IP would be used for iquery"
    todo.todo2 "todo 2" "Add option to create VS as a port of the self?"
    todo.todo3 "todo 3" "Create a global dashboard that will pull the data from the raw_export irule output of multiple GTMs."
    todo.todo4 "todo 4" "Add additional gtm details, like sync group name, sync enabled, zone-sync...?"
    todo.todo5 "todo 5" "DONE-inv0.3-See if the icall can load session(irule) table data to bypass the ifile"
    todo.todo6 "todo 6" "Potentially add some images and side bar navigation, probably as part of the global page - Added f5 favicon image"
    todo.todo7 "todo 7" "Add certificate expiration details, or provide on seperate page"
    todo.todo8 "todo 8" "Add additional details and links for articles to assist with troubleshooting iquery"
}
            }
            role-acl none
            run-as none
        }
    }
    description none
    ignore-verification false
    requires-bigip-version-max none
    requires-bigip-version-min 14.1.0
    requires-modules { ltm gtm }
    signing-key none
    tmpl-checksum none
    tmpl-signature none
}
